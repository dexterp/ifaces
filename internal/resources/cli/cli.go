package cli

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"
	"os"
	"text/template"

	"github.com/dexterp/ifaces/internal/resources/cond"
	"github.com/docopt/docopt-go"
)

// usageTmpl is a text/template document. Sub commands are toggled in or out
// depending on the arguments passed to the usage function.

//go:embed cli.gotmpl
var usageTmpl string

// usage Returns usage string. Unless set to true the usage string will not show
// the function and type document options.
func usage(argv []string) string {
	var (
		fun   = cond.StringValPos("func", 1, argv)
		struc = cond.StringValPos("struct", 1, argv)
		typ   = cond.StringValPos("type", 1, argv)
		root  = !fun && !struc && !typ
	)
	t, err := template.New(`cli.gotmpl`).Parse(usageTmpl)
	if err != nil {
		panic(err)
	}
	data := struct {
		Func      bool
		NoOptions bool
		Root      bool
		Struct    bool
		Type      bool
	}{
		Func:   fun,
		Root:   root,
		Struct: struc,
		Type:   typ,
	}

	buf := &bytes.Buffer{}
	err = t.Execute(buf, data)
	if err != nil {
		panic(err)
	}
	return buf.String()
}

func sliceStr2Any(in []string) (out []any) {
	for _, x := range in {
		out = append(out, x)
	}
	return
}

func ParseArgs(argv []string, version string, stdout io.Writer, stderr io.Writer) (*Args, error) {
	var fnerr error
	fn := func(err error, usageStr string) {
		if cond.EqualAny("-h", sliceStr2Any(argv)...) {
			fmt.Fprintln(stdout, usage(argv))
			os.Exit(0)
		} else {
			fnerr = err
			fmt.Fprint(stderr, err.Error())
			fmt.Fprintln(stderr, `invalid or incomplete options, see "ifaces -h" for cli options`)
		}
	}
	if fnerr != nil {
		return nil, fnerr
	}
	parser := &docopt.Parser{
		HelpHandler: fn,
	}
	args, err := parser.ParseArgs(usage(argv), argv, version)
	if err != nil {
		return nil, err
	}
	config := &Args{}
	err = args.Bind(config)
	if err != nil {
		fmt.Fprintf(stderr, `error binding command arguments: %s`, err.Error())
	}
	// Disabled comment option for hard coded option.
	config.Cmt = `Code generated by ifaces DO NOT EDIT.`
	return config, nil
}

type Args struct {
	CmdStruct bool   `docopt:"struct"`
	CmdType   bool   `docopt:"type"`
	CmdFunc   bool   `docopt:"func"`
	Out       string `docopt:"-o"`

	Append    bool   `docopt:"-a"`
	Cmt       string `docopt:"-c"`
	Iface     string `docopt:"-i"`
	FDoc      string `docopt:"--fdoc"`
	MatchFunc string `docopt:"-m"`
	MatchType string `docopt:"-t"`
	Module    string `docopt:"-x"`
	NoFDoc    bool   `docopt:"--nfdoc"`
	NoTDoc    bool   `docopt:"--ntdoc"`
	Pkg       string `docopt:"-p"`
	Post      string `docopt:"-s"`
	Pre       string `docopt:"-e"`
	Print     bool   `docopt:"-d"`
	Src       string `docopt:"-f"`
	TDoc      string `docopt:"--tdoc"`
	NoMethods bool   `docopt:"--nmethod"`
}
